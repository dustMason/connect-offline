{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Connect-Offline\r\n\r\nWhile searching for some connect middleware to handle generating a cache\r\nmanifest, I discovered that the CacheManifest middleware had been\r\nremoved from the 1.0 release of Connect. I'm not sure why that is, but\r\nit inspired me to create a new one.\r\n\r\n## Installation\r\n\r\n```\r\n  npm install connect-offline\r\n```\r\n\r\n## What It Does\r\n\r\n*connect-offline* simply compiles the arguments you pass into a properly formatted cache\r\nmanifest file. The main convenience it provides is automatically making\r\nsure the cache gets re-downloaded by the browser when you update the\r\nfiles that are being cached. This is done using the modified-at\r\ntimestamps on the files.\r\n\r\n## Options\r\n\r\n`manifest_path` is the url you want to serve your cache manifest from.\r\nThis should match the `manifest` attribute of your html tag. For example: `<html manifest=\"example.appcache\">`\r\n\r\n`networks` is a simple array of values for the `NETWORK` section of the\r\nmanifest.\r\n\r\n`fallbacks` is an object to populate the `FALLBACK` section of the\r\nmanifest. Its keys become the urls to handle while its values represent\r\nthe redirects for those urls.\r\n\r\n`files` expects an array of objects describing directories of files to\r\nadd to the cache. See below for an example.\r\n\r\n`use_fs_watch` is a boolean that indicates whether or not you want node\r\nto call fs.watch() on each file you are including in the cache manifest\r\nwith a callback that will update the \"cache buster\" timestamp when any\r\nof those files change. You might want to use this option to ease\r\ndevelopment - you won't have to restart your server process every time\r\nyou change a file and want browsers to download the new cache manifest.\r\nSee the tests for more info.\r\n\r\n## Check It Out\r\n\r\nGiven a directory structure:\r\n\r\n```\r\n├── app.js\r\n└── public\r\n    ├── css\r\n    │   └── style.css\r\n    └── js\r\n        └── hello.js\r\n```\r\n\r\nAnd this app.coffee:\r\n\r\n```\r\n  offline = require('connect-offline')\r\n  app = require('connect').createServer()\r\n  app.use(offline\r\n    manifest_path: \"/application.manifest\"\r\n    files: [\r\n      { dir: '/public/css', prefix: '/css/' },\r\n      { dir: '/public/js', prefix: '/js/' }\r\n    ]\r\n  )\r\n  app.listen 3590\r\n```\r\n\r\nYou'll get an `application.manifest` that looks like this:\r\n\r\n```\r\n  CACHE MANIFEST\r\n  # Wed, 22 Aug 2012 03:24:19 GMT\r\n\r\n  CACHE:\r\n  /css/style.css\r\n  /js/hello.js\r\n```\r\n","name":"connect-offline","google":"","tagline":"An HTML5 Cache Manifest generator for Node.js"}