// Generated by CoffeeScript 1.3.3
(function() {
  var ConnectOffline, offline,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = offline = function(options) {
    var connectOffline, _ref, _ref1, _ref2;
    if (options == null) {
      options = {};
    }
    if ((_ref = options.networks) == null) {
      options.networks = [];
    }
    if ((_ref1 = options.fallbacks) == null) {
      options.fallbacks = [];
    }
    if ((_ref2 = options.paths) == null) {
      options.paths = [];
    }
    connectOffline = module.exports.instance = new ConnectOffline(options);
    return connectOffline.middleware;
  };

  ConnectOffline = (function() {

    function ConnectOffline(options) {
      this.options = options;
      this.middleware = __bind(this.middleware, this);

      this.latestmtime = new Date();
    }

    ConnectOffline.prototype.header_section = function() {
      return "CACHE MANIFEST\n" + "# " + this.latestmtime.toUTCString();
    };

    ConnectOffline.prototype.files_section = function() {
      return "\n\nCACHE:\n" + this.options.paths.join("\n");
    };

    ConnectOffline.prototype.networks_section = function() {
      return "\n\nNETWORK:\n" + this.options.networks.join("\n");
    };

    ConnectOffline.prototype.fallbacks_section = function() {
      return "\n\nFALLBACK:\n" + this.options.fallbacks.map(function(second, first) {
        return first + " " + second;
      }).join("\n");
    };

    ConnectOffline.prototype.response = function() {
      return [this.header_section(), this.files_section(), this.networks_section(), this.fallbacks_section()].join("\n");
    };

    ConnectOffline.prototype.middleware = function(req, res, next) {
      var manifest;
      if ("/application.manifest" === req.url) {
        manifest = this.response();
        res.writeHead(200, {
          "Content-Type": "text/cache-manifest",
          "Last-Modified": this.latestmtime.toUTCString(),
          "Content-Length": manifest.length
        });
        res.end(manifest);
      }
      return next();
    };

    return ConnectOffline;

  })();

}).call(this);
